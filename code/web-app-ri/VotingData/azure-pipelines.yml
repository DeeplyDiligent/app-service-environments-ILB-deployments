variables:
  appEnvironmentName: 'production'
  appPath: code/web-app-ri/VotingData
  deploymentMethod: runFromZip


trigger:
  branches:
    include:
    - master
  paths:
    include:
    - $(appPath)


stages:
- stage: Build
  jobs:
  - job: VotingDataApiAppBuild
    displayName: Voting Data Api App Continous Integration
    pool:
      name: $(poolName)
    continueOnError: false
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.x'
      inputs:
        version: 3.1.x

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(appPath)/VotingData.csproj

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(appPath)/VotingData.csproj
        arguments: '--configuration $(BuildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        workingDirectory: $(appPath)
        arguments: '--configuration release --output "$(build.artifactstagingdirectory)" --no-restore'
        zipAfterPublish: false

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        archiveFile: '$(build.artifactstagingdirectory)/votingdataapiapp-$(build.buildid).zip'
        rootFolderOrFile: '$(build.artifactstagingdirectory)'
        includeRootFolder: false
        archiveType: zip

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)/votingdataapiapp-$(build.buildid).zip'
        artifactName: 'drop'

- stage: DeployZone1
  dependsOn:
  - Build
  jobs:
  - deployment: VotingDataApiAppZone1Deploy
    displayName: Voting Data Api App Zone 1 Continous Deployment
    pool:
      name: $(poolName)
    environment: $(appEnvironmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: votingapiapp-1'
            inputs:
              azureSubscription: $(azureSubscription)
              WebAppName: $(appServiceNameZone1)
              enableCustomDeployment: true
              DeploymentType: $(deploymentMethod)
              packageForLinux: '$(Pipeline.Workspace)/drop/votingdataapiapp-$(build.buildid).zip'


- stage: DeployZone3
  dependsOn:
  - Build
  jobs:
  - deployment: VotingDataApiAppZone3Deploy
    displayName: Voting Data Api App Zone 3 Continous Deployment
    pool:
      name: $(poolName)
    environment: $(appEnvironmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: votingapiapp-3'
            inputs:
              azureSubscription: $(azureSubscription)
              WebAppName: $(appServiceNameZone3)
              enableCustomDeployment: true
              DeploymentType: $(deploymentMethod)
              packageForLinux: '$(Pipeline.Workspace)/drop/votingdataapiapp-$(build.buildid).zip'
