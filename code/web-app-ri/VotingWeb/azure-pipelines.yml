variables:
  appEnvironmentName: 'production'
  appPath: code/web-app-ri/VotingWeb
  deploymentMethod: runFromPackage


trigger:
  branches:
    include:
    - master
  paths:
    include:
    - $(appPath)


stages:
- stage: Build
  jobs:
  - job: VotingWebAppBuild
    displayName: Voting Web App Continous Integration
    pool:
      name: $(poolName)
    continueOnError: false
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.x'
      inputs:
        version: 3.1.x

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(appPath)/VotingWeb.csproj

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: $(appPath)/VotingWeb.csproj
        arguments: '--no-restore'

    - task: UseNode@1
      displayName: 'Use Node'
      inputs:
        checkLatest: true

    - task: Npm@1
      displayName: 'npm install'
      inputs:
        verbose: false

    - task: Npm@1
      displayName: 'npm install bower'
      inputs:
        command: custom
        verbose: false
        customCommand: 'install -g bower'

    - script: |
           cd $(appPath)
           bower install
      displayName: 'bower install'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: true
        workingDirectory: $(appPath)
        arguments: '--configuration release --output "$(build.artifactstagingdirectory)" --no-restore'
        zipAfterPublish: false

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        archiveFile: '$(build.artifactstagingdirectory)/votingwebapp-$(build.buildid).zip'
        rootFolderOrFile: '$(build.artifactstagingdirectory)/VotingWeb'
        includeRootFolder: false
        archiveType: zip

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)/votingwebapp-$(build.buildid).zip'
        artifactName: 'drop'

- stage: DeployZone1
  dependsOn:
  - Build
  jobs:
  - deployment: VotingWebAppZone1Deploy
    displayName: Voting Web App Zone 1 Continous Deployment
    pool:
      name: $(poolName)
    environment: $(appEnvironmentName)
    strategy:
      runOnce:
        deploy:
          steps:
           - task: AzureWebApp@1
             displayName: 'Azure Web App Deploy: votingwebapp-1'
             inputs:
               azureSubscription: $(azureSubscription)
               appType: webApp
               appName: '$(webAppNameZone1)'
               package: '$(Pipeline.Workspace)/drop/votingwebapp-$(build.buildid).zip'
               deploymentMethod: $(deploymentMethod)

- stage: DeployZone3
  dependsOn:
  - Build
  jobs:
  - deployment: VotingWebAppZone3Deploy
    displayName: Voting Web App Zone 3 Continous Deployment
    pool:
      name: $(poolName)
    environment: $(appEnvironmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: votingwebapp-3'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webApp
              appName: '$(webAppNameZone3)'
              package: '$(Pipeline.Workspace)/drop/votingwebapp-$(build.buildid).zip'
              deploymentMethod: $(deploymentMethod)
